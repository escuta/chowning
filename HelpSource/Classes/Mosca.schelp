title::Mosca
summary::GUI-assisted authoring of sound fields
categories::Libraries>Ambisonic Toolkit, Libraries>HOA
related::Guide/guide-Mosca, Tutorials/ABCs-of-the-ATK, Guides/HOAguide, Tutorials/AutomationIntro, Guides/OssiaReference

note::
Installing the ATK  
link:: http://www.ambisonictoolkit.net/download/kernels##Kernels:: and
link:: http://www.ambisonictoolkit.net/download/matrices##Matrices:: is
required, as well as the
link:: https://github.com/supercollider/sc3-plugins##sc3-plugins:: version
3.10 or higher. For more Library options, you can install this
link:: https://github.com/scrime-u-bordeaux/sc3-pluginsHOA##HOA fork::

::

DESCRIPTION::
Mosca is a SuperCollider class for GUI-assisted production of sound fields with simulated moving or stationary sound sources. Input sources may be any combination of mono, stereo or B-format material and the signals may originate from file, from external inputs (physical or from other applications via Jack) or from SuperCollider's own synths. In the case of synth input, each is associated by the user with a particular source and registered in a synth registry. This way, they are spatialised and also receive data from the source control (eg. x, y and z coordinates or auxiliary fader data). Ambisonic Sound fields may be decoded using a variety of built-in decoders (including binaural), Faust Ugens created with the AmbiDecodertoolbox (see link::Tutorials/Exercise_15_HOA_ADT_DecoderHelper##HOA decoding::) or with external decoders such as Ambdec. Mosca has its own transport provided by the link::Tutorials/AutomationIntro##Automation quark:: for recording and playback of source data. This can be used independently or may be synchronised to a DAW using Midi Machine Control (MMC) messages. This function has been tested to work with Ardour and Jack. The integration of link::Guides/OssiaReference##ossia-sclang:: also allows Mosca's individual parameters to be controled with the interactive sequencer link::https://ossia.io##Ossia/score:: as well as any other application featuring OSCQuerry or plain OSC communication.

subsection::Sources
Mono and stereo sources may be spatialized with ugens from a selection of libraries (Ambitools, HoaLib, ADT, ATK, BF-FMH, Josh & VBAP) set indiviualy for each source. For B-format input signals, which are already ambisonically encoded, the available options for transformation the ATK and Abitools. The ATK is used to implement push transformations to manipulate the angular location of sources as well as to perform rotations of the source sound field and to manipulate its directivity. Ambitools is used to implement a beam formation technique. All sources are subject to high frequency attenuation with distance. For a better sensation of nearness, ATK implements a proximity effect, adding a bass boost to proximal sources among other phase effects to simulate wave curvature. To that same effect, the Ambitools encoder makes use of "Near Field Compensation". Generally, the differences between libraries can be summarised as follows:

table::
    ## Ambitools || most realistic but CPU demanding
    ## HoaLib    || lightweight and neutral sounding
    ## ADT       || lightweight and broad sounding
    ## SC-HOA    || even lighter
    ## ATK       || 1st order only but many options
    ## BF-FMH    || 2nd order max
    ## Josh      || 1st order granular effect
    ## VBAP      || light and precise but less homogeneous
::

note::
The results of any particular spatialisation library are often dependant on the source material. ADT and ATK may be more suited to wide and deep immersive sounds where more focussed, narrow sounds may be better located by the listener with VBAP. ...
::

subsection::Reverberation
Reverberation is performed either using a B-format tail room impulse responses (RIRs) or by using reverberators crated with SuperCollider's AllpassC and FreeVerb ugens. With both options, two reverberation level controls are included in the GUI for setting close and distant levels. "Close" reverberation in this case is "global" and is audible by the listener from all directions when the source is close. As it is global, it's type is applied to the entire scene. "Distant" reverb on the other hand is "local" in scope and selected and applied on a per-source basis. It is processed by the individually selected spatialiser along with the dry signal. This effect predominates as the source becomes more distant. For ambisonic signals, the "Close" reverberation may be described as a "2nd order diffuse A-format reverberation". This technique produces reverberation weighted in the direction of sound events and involves conversion to and from A-format in order to apply the effect (ANDERSON). The encoded 2nd order ambisonic signal is converted to a 12-channel A-format signal and then either:

list::
##convolved with a B-format RIR which has been "upsampled" to 2nd order and converted to A-format impulse spectrum
##passed through Freeverb or allpass ugens before being converted back to a 2nd order B-format diffuse signal
::

For non-ambisonic signals, spatialised with VBAP, a part of the original source signal is mixed with the W component of the B-format reverb input for an omnidirectional effect. These options are drawing from John Chowning's technique of applying "local" and "global" reverberation to sources (CHOWNING)

note::
Please remember that this diffuse reverberation process, especially with large impulse responses, may require the user to increase the audio buffer size, thus adding more latency.
::

subsection::Additional Features
Additional features include a scalable Doppler Effect on moving sources, the looping of sources loaded or streamed from file and the adjustment of the virtual loudspeaker angle for stereo sources. Further, a "contraction" control enables crossfades between B-format signals and their raw W component. In the case B-format input signals the contraction changes the sound from having omnidirectional characteristics to becoming a focussed point source. When using the ATK in the case as mono or stereo input sources (the latter of which are treated as two mono sources with adjustable angle from one another) with the ATK, a de-contraction of the focussed source will render it omnidirectional.

Mosca supports methods for making "A-format inserts" on any source spatialised in the
GUI. In this way, the user may write a filtering synth and apply it to the sound without
disrupting the encoded spatial characteristics. Please see the
link::Guide/guide-Mosca##guide:: for examples.

Additionally, Mosca v0.2 implements headtracking with the Arduino 9-axes Motion Shield
and an appropriate Arduino board such as an Uno. Mosca may also run GUI-free and has a
mechanism for coded control of the interface (Setup example in the
link::Guide/guide-Mosca##guide::).

subsection::Acknowledgments

The class makes extensive use of the
link::http://www.ambisonictoolkit.net##Ambisonic Toolkit:: (ATK)
by Joseph Anderson as well as Florian Grond's
link::https://github.com/florian-grond/SC-HOA/##SC-HOA::, based on
link::https://github.com/sekisushai/ambitools##Ambitools:: by
Pierre Lecompte, the link::https://github.com/CICM/HoaLibrary-Faust##faust version:: of
the link::http://hoalibrary.mshparisnord.fr/en##HoaLibrary:: by Pierre Guillot, the
link::https://bitbucket.org/ambidecodertoolbox/adt/src/master/##AmbiDecoderToolbox:: and
sevral other supercollider pluggins for spatial renderding.
Augmented controll has been granted by the integrating the
link::https://github.com/neeels/Automation/##Automation quark:: by Neels Hofmeyr
and link::https://github.com/OSSIA/ossia-sclang##ossia-sclang::, made possible by
link::https://github.com/pchdev##Pierre Cochard::,
link::https://github.com/jcelerier##Jean-Michaël Celerier:: and the
link::https://github.com/OSSIA##OSSIA Team::.

Many thanks to Joseph Anderson, Neels Hofmeyr and members of the SuperCollider list for
their assistance and valuable suggestions.

subsection::References

strong::ANDERSON::, Joseph. Authoring complex Ambisonic soundfields:
An artist's tips & tricks.
DIGITAL HYBRIDITY AND SOUNDS IN SPACE JOINT SYMPOSIUM. University of Derby,
UK: 2011.

strong::CHOWNING::, John M. The Simulation of Moving Sound Sources.
Computer Music Journal, v. 1,
n. 3, p. 48-52, 1977.

strong::GROND::, Florian & strong::LECOMPTE::, Pierre. Higher Order Ambisonics for
SuperCollider.
Linux Audio Conference, Jean MONNET University. Saint-Etienne
France: 2017.

strong::CELERIER::, Jean-Michaël. Authoring interactive media : a logical & temporal
approach.
Ph. D dissertations, University of BOrdeaux,
France: 2018.


CLASSMETHODS::

METHOD:: new
Create Mosca instance, prepare RIR spectrum data and synth internals.

ARGUMENT:: projDir
Path to project directory. this will guive a deffault path for browsing sound files or
saving and loading automations.

ARGUMENT:: nsources
The number of sources to be spatialised.

ARGUMENT:: dur
Duration in seconds of automation transport.

ARGUMENT:: irBank
Path to B-Format ambisonic room impulse responses folder. Ensure that it has
the same sample rate as your system.

ARGUMENT:: server
Server used. Default is Server.default.

ARGUMENT:: parentOssiaNode
An OSSIA_Node that will contain all of Mosca's parameters.
It would most likely be an OSSIA_Device. see link::Guides/OssiaReference::
note::If parentOssiaNode is left blank, an OSSIA_Device named "SC" is created and can be accesed
with the .parentOssiaNode method
::

ARGUMENT:: allCritical
Set all OSSIA_Parameter to "critical" for websocket communication exclusively.
(necessary when used outside of a local network). Only relevant when exposing an
OSCQuerry server

ARGUMENT:: decoder
The ambisonic decoder to be used. See the following for ATK
list::
##link::Classes/FoaDecode::
##link::Classes/FoaDecoderMatrix::
##link::Classes/FoaDecoderKernel::
::

for Higher order ambisonics, see the
link::Tutorials/Exercise_15_HOA_ADT_DecoderHelper##tutorial for the AmbiDecoderToolbox::.
note::If decoder is left blank, Mosca will send raw ambisonic signal to
the "rawoutbus" for external decoding with, for example,
link::http://kokkinizita.linuxaudio.org/linuxaudio/##AmbDec::.
Non-ambisonic signal will still ouput normaly to "outbus".
If the string "internal" is passed as the decoder argument, Mosca will use either the BFDecode1
(1st order) or the FMHDecode1 (2nd order) ugens.
::

ARGUMENT:: maxorder
Maximum Ambisonics order for the rendering system. Default is 1, Mosca's limit (SC_HOA) is 5.

ARGUMENT:: speaker_array
Speaker setup defined with nested array in the form
[[speaker 1 azimuth in degrees, speaker 1 elevation in degrees, speaker 1 radius in
meters],[speaker 2 ...], ...]

ARGUMENT:: outbus
Index of the first output bus, all other channels folow sequentialy.

ARGUMENT:: suboutbus
Index of the output bus for subwoofers, the signal is a mono mix of all other channels.

ARGUMENT:: rawformat
Starting bus for raw first ambisonic output.

ARGUMENT:: rawoutbus
Starting bus for raw first order ambisonic output.

ARGUMENT:: autoloop
If set true, transport will always loop.

returns:: New instance.

METHOD:: printSynthParams
Print Parameters usable in SynthDefs.

returns:: A string.

INSTANCEMETHODS::

METHOD:: gui
Create the graphical interface.

ARGUMENT:: size
Pixel width and height of GUI window. Minimum of 550 pixels.

ARGUMENT:: palette
Color palette of the gui.

ARGUMENT:: lag
Maximum interval in seconds to refresh GUI. Default is 0.07.

METHOD:: headTracker
Connect to the head traker module (Arduino) through the serial port.

ARGUMENT:: port
Name of serial port to receive headtracking data. Eg. "/dev/ttyACM0",
or the udp port to connect to pozyx.py,
for use with a binaural decoder. Default is nil.

ARGUMENT:: offsetheading
Value in degrees radians to offset heading value of the connected Arduino 9-axes Motion
Shield. Default is 0. This may be used to adjust for the "magnetic declination" of your
local region, calibrating the shield to true north (see link::https://en.wikipedia.org/wiki/
Magnetic_declination##the wikipedia entry:: and link::http://www.magnetic-declination.com::).
It may also be used to
rotate North to the direction of your computer monitor. Eg. If when you are facing the
monitor and the offsetheading is set to the default 0, you see a heading value (bottom-
right of window) of 2.6, set the value to -2.6. The heading value will now be set to
zero when you face the monitor.

ARGUMENT:: type
list::
##\orient allows the use of a BNO05 chip snding serial data through Arduino to control the orientation parameter.
See Mosca/headTracker/headTrackGPS.ino
##\gps adds gps tracking to control the position parameter.
##\pozyx0SC allows the use of a pozyx tag sending serial data through the pozyx python API
to control orientation and position parameters with OSC.
See Mosca/headTracker/pozyx.py
::

ARGUMENT:: extraArgs
Extra arguments for postioning. With \pozyx type, extra Args reprensent the dimensions off the room in centy meters [with, length, height]

private:: clearStopFunc
private:: clearTriggerFunc
private:: getSynthRegistry
private:: initMosca
private:: setSynths
private:: aux1
private:: aux1 = value
private:: aux2
private:: aux2 = value
private:: aux3
private:: aux3 = value
private:: aux4
private:: aux4 = value
private:: aux5
private:: aux5 = value
private:: bufsize
private:: bufsize = value
private:: busini
private:: busini = value
private:: controle
private:: controle = value
private:: dec
private:: dec = value
private:: decaytime
private:: decaytime = value
private:: decoder
private:: decoder = value
private:: delaytime
private:: delaytime = value
private:: dur
private:: dur = value
private:: halfwidth
private:: halfwidth = value
private:: irbuffer
private:: irbuffer = value
private:: kernelSize
private:: kernelSize = value
private:: m
private:: m = value
private:: mmcslave
private:: mmcslave = value
private:: myTestVar
private:: myTestVar = value
private:: ncan
private:: ncan = value
private:: nfontes
private:: nfontes = value
private:: offset
private:: offset = value
private:: revGlobal
private:: revGlobal = value
private:: revGlobalBF
private:: revGlobalBF = value
private:: revGlobalSoa
private:: revGlobalSoa = value
private:: rirW
private:: rirW = value
private:: rirZ
private:: rirZ = value
private:: rirY
private:: rirY = value
private:: rirX
private:: rirX = value
private:: rirWspectrum
private:: rirWspectrum = value
private:: rirXspectrum
private:: rirXspectrum = value
private:: rirYspectrum
private:: rirYspectrum = value
private:: rirZspectrum
private:: rirZspectrum = value
private:: scInBus
private:: scInBus = value
private:: scale
private:: scale = value
private:: sprite
private:: sprite = value
private:: stopFunc
private:: stopFunc = value
private:: swinbus
private:: swinbus = value
private:: synthRegistry
private:: synthRegistry = value
private:: sysex
private:: sysex = value
private:: textbuf
private:: textbuf = value
private:: triggerFunc
private:: triggerFunc = value
private:: waux
private:: waux = value
private:: wdados
private:: wdados = value
private:: width
private:: width = value
private:: win
private:: win = value
private:: aFormatBusFoa
private:: aFormatBusFoa = value
private:: aFormatBusSoa
private:: aFormatBusSoa = value
private:: espacializador
private:: espacializador = value
private:: insertFlag
private:: insertFlag = value
private:: raworder
private:: raworder = value
private:: releaseInsert
private:: synt
private:: synt = value
private:: rawbusfoa
private:: rawbusfoa = value
private:: rawbussoa
private:: rawbussoa = value
private:: autoloop
private:: autoloop = value
private:: autoloopval
private:: autoloopval = value
private:: binMasterBus
private:: binMasterBus = value
private:: blips
private:: globFOATransform
private:: globFOATransform = value
private:: globTBus
private:: globTBus = value
private:: headingOffset
private:: headingOffset = value
private:: headingnumbox
private:: headingnumbox = value
private:: kroutine
private:: kroutine = value
private:: lastAutomation
private:: lastAutomation = value
private:: mark1
private:: mark1 = value
private:: mark2
private:: mark2 = value
private:: matchTByte
private:: offsetHeading
private:: offsetheading
private:: offsetheading = value
private:: pitchnumbox
private:: pitchnumbox = value
private:: playingBF
private:: playingBF = value
private:: procTracker
private:: recbus
private:: recbus = value
private:: recchans
private:: recchans = value
private:: rollnumbox
private:: rollnumbox = value
private:: serialKeepItUp
private:: serport
private:: serport = value
private:: streambuf
private:: streambuf = value
private:: streamdisk
private:: streamdisk = value
private:: streamrate
private:: streamrate = value
private:: tfield
private:: tfield = value
private:: track2arr
private:: track2arr = value
private:: track2arr2
private:: track2arr2 = value
private:: track2i
private:: track2i = value
private:: trackPort
private:: trackPort = value
private:: trackarr
private:: trackarr = value
private:: trackarr2
private:: trackarr2 = value
private:: trackerRoutine
private:: tracki
private:: tracki = value
private:: troutine
private:: troutine = value
private:: watcher
private:: watcher = value
private:: xval
private:: xval = value
private:: yval
private:: yval = value
private:: zval
private:: zval = value
private:: businibox
private:: businibox = value
private:: dcheck
private:: dcheck = value
private:: dfcheck
private:: dfcheck = value
private:: firstTime
private:: firstTime = value
private:: hwncheck
private:: hwncheck = value
private:: lncheck
private:: lncheck = value
private:: lpcheck
private:: lpcheck = value
private:: ncanbox
private:: ncanbox = value
private:: rvcheck
private:: rvcheck = value
private:: scncheck
private:: scncheck = value
private:: spcheck
private:: spcheck = value
private:: a1box
private:: a1box = value
private:: a1boxProxy
private:: a1boxProxy = value
private:: a1but
private:: a1but = value
private:: a1check
private:: a1check = value
private:: a1checkProxy
private:: a1checkProxy = value
private:: a2box
private:: a2box = value
private:: a2boxProxy
private:: a2boxProxy = value
private:: a2but
private:: a2but = value
private:: a2check
private:: a2check = value
private:: a2checkProxy
private:: a2checkProxy = value
private:: a3box
private:: a3box = value
private:: a3boxProxy
private:: a3boxProxy = value
private:: a3but
private:: a3but = value
private:: a3check
private:: a3check = value
private:: a3checkProxy
private:: a3checkProxy = value
private:: a4box
private:: a4box = value
private:: a4boxProxy
private:: a4boxProxy = value
private:: a4but
private:: a4but = value
private:: a4check
private:: a4check = value
private:: a4checkProxy
private:: a4checkProxy = value
private:: a5box
private:: a5box = value
private:: a5boxProxy
private:: a5boxProxy = value
private:: a5but
private:: a5but = value
private:: a5check
private:: a5check = value
private:: a5checkProxy
private:: a5checkProxy = value
private:: abox
private:: abox = value
private:: aboxProxy
private:: aboxProxy = value
private:: angle
private:: angle = value
private:: angnumbox
private:: angnumbox = value
private:: angslider
private:: angslider = value
private:: atualizarvariaveis
private:: atualizarvariaveis = value
private:: aux1numbox
private:: aux1numbox = value
private:: aux2numbox
private:: aux2numbox = value
private:: aux3numbox
private:: aux3numbox = value
private:: aux4numbox
private:: aux4numbox = value
private:: aux5numbox
private:: aux5numbox = value
private:: auxbutton1
private:: auxbutton1 = value
private:: auxbutton2
private:: auxbutton2 = value
private:: auxbutton3
private:: auxbutton3 = value
private:: auxbutton4
private:: auxbutton4 = value
private:: auxbutton5
private:: auxbutton5 = value
private:: auxslider1
private:: auxslider1 = value
private:: auxslider2
private:: auxslider2 = value
private:: auxslider3
private:: auxslider3 = value
private:: auxslider4
private:: auxslider4 = value
private:: auxslider5
private:: auxslider5 = value
private:: blindControlPlay
private:: blindControlStop
private:: businiboxProxy
private:: businiboxProxy = value
private:: busininumbox
private:: busininumbox = value
private:: cbox
private:: cbox = value
private:: cboxProxy
private:: cboxProxy = value
private:: clev
private:: clev = value
private:: connumbox
private:: connumbox = value
private:: control
private:: control = value
private:: cslider
private:: cslider = value
private:: currentsource
private:: currentsource = value
private:: dbox
private:: dbox = value
private:: dboxProxy
private:: dboxProxy = value
private:: dcheckProxy
private:: dcheckProxy = value
private:: df
private:: df = value
private:: dfcheckProxy
private:: dfcheckProxy = value
private:: diffusecheck
private:: diffusecheck = value
private:: dirnumbox
private:: dirnumbox = value
private:: dirslider
private:: dirslider = value
private:: dlev
private:: dlev = value
private:: dopcheque
private:: dopcheque = value
private:: dopnumbox
private:: dopnumbox = value
private:: doppler
private:: doppler = value
private:: dpbox
private:: dpbox = value
private:: dpboxProxy
private:: dpboxProxy = value
private:: dplev
private:: dplev = value
private:: dpslider
private:: dpslider = value
private:: free
private:: funcs
private:: funcs = value
private:: gbfbus
private:: gbfbus = value
private:: gbox
private:: gbox = value
private:: gboxProxy
private:: gboxProxy = value
private:: gbus
private:: gbus = value
private:: glev
private:: glev = value
private:: gnumbox
private:: gnumbox = value
private:: gslider
private:: gslider = value
private:: guiflag
private:: guiflag = value
private:: headingnumboxProxy
private:: headingnumboxProxy = value
private:: hwInCheck
private:: hwInCheck = value
private:: hwn
private:: hwn = value
private:: hwncheckProxy
private:: hwncheckProxy = value
private:: isPlay
private:: isPlay = value
private:: isRec
private:: isRec = value
private:: lastx
private:: lastx = value
private:: lasty
private:: lasty = value
private:: lastz
private:: lastz = value
private:: lbox
private:: lbox = value
private:: lboxProxy
private:: lboxProxy = value
private:: level
private:: level = value
private:: lincheck
private:: lincheck = value
private:: llev
private:: llev = value
private:: ln
private:: ln = value
private:: lncheckProxy
private:: lncheckProxy = value
private:: lnumbox
private:: lnumbox = value
private:: loadNonAutomationData(path)
private:: loopcheck
private:: loopcheck = value
private:: lp
private:: lp = value
private:: lpcheckProxy
private:: lpcheckProxy = value
private:: lslider
private:: lslider = value
private:: mbus
private:: mbus = value
private:: ncanais
private:: ncanais = value
private:: ncanboxProxy
private:: ncanboxProxy = value
private:: ncannumbox
private:: ncannumbox = value
private:: newtocar(i, tpos, force: false)
private:: novoplot
private:: novoplot = value
private:: oxbox
private:: oxbox = value
private:: oybox
private:: oybox = value
private:: ozbox
private:: ozbox = value
private:: pitchnumboxProxy
private:: pitchnumboxProxy = value
private:: rbox
private:: rbox = value
private:: rboxProxy
private:: rboxProxy = value
private:: revcheck
private:: revcheck = value
private:: rirBLDspectrum
private:: rirBLDspectrum = value
private:: rirBRUspectrum
private:: rirBRUspectrum = value
private:: rirFLUspectrum
private:: rirFLUspectrum = value
private:: rirFRDspectrum
private:: rirFRDspectrum = value
private:: rlev
private:: rlev = value
private:: rnumbox
private:: rnumbox = value
private:: rollnumboxProxy
private:: rollnumboxProxy = value
private:: rslider
private:: rslider = value
private:: runStop
private:: runStop = value
private:: runStops
private:: runStops = value
private:: runTrigger
private:: runTrigger = value
private:: runTriggers
private:: runTriggers = value
private:: rv
private:: rv = value
private:: rvcheckProxy
private:: rvcheckProxy = value
private:: sbus
private:: sbus = value
private:: scInCheck
private:: scInCheck = value
private:: scn
private:: scn = value
private:: scncheckProxy
private:: scncheckProxy = value
private:: soaBus
private:: soaBus = value
private:: sombuf
private:: sombuf = value
private:: sp
private:: sp = value
private:: spcheckProxy
private:: spcheckProxy = value
private:: spreadcheck
private:: spreadcheck = value
private:: stcheck
private:: stcheck = value
private:: stcheckProxy
private:: stcheckProxy = value
private:: testado
private:: testado = value
private:: tfieldProxy
private:: tfieldProxy = value
private:: updateSynthInArgs
private:: updateSynthInArgs = value
private:: updatesourcevariables
private:: updatesourcevariables = value
private:: vbox
private:: vbox = value
private:: vboxProxy
private:: vboxProxy = value
private:: volnumbox
private:: volnumbox = value
private:: volslider
private:: volslider = value
private:: xbox
private:: xbox = value
private:: xboxProxy
private:: xboxProxy = value
private:: ybox
private:: ybox = value
private:: yboxProxy
private:: yboxProxy = value
private:: zbox
private:: zbox = value
private:: zboxProxy
private:: zboxProxy = value
private:: zlev
private:: zlev = value
private:: znumbox
private:: znumbox = value
private:: zslider
private:: zslider = value
private:: gui
private:: newtocar
private:: guiInt
private:: guiInt = value
private:: lastGui
private:: lastGui = value
private:: looping
private:: looping = value
private:: plim
private:: plim = value
private:: reverb
private:: reverb = value
private:: rir
private:: rir = value

METHOD:: getSCBus
Create the bus associated with synth registrant.

ARGUMENT:: sourceNum
The number of the source (starting with 1).

ARGUMENT:: numChans
The number of channels (starting with 1).

METHOD:: playAutomation
Non-gui method for playing automation data. Useful for playing data immediately after a
Mosca instance is created. If called after loadAutomation (see below), may require a
prior "wait" message to allow all data to load.

ARGUMENT:: loop
A boolean to enable/disable looping the automation transport.

METHOD:: loadAutomation
Loads saved data not recorded directly by Automation. These include GUI checkbox values
(with the exception of auxiliary checkboxes) and file names. It is used for loading data
immediately after a Mosca instance is created and when running Mosca without a GUI. See
code examples below.

ARGUMENT:: directory
Path to automation directory.


EXAMPLES::

The following is a basic Binaural Setup, see link::Guide/guide-Mosca:: for more examples

code::
(
Server.killAll;                   // Make sure no servers are running yet
// Create and name an OSSIA_Device to contain all of Mosca's parameters
~supercoll = OSSIA_Device('SC');
~supercoll.exposeOSC;             // Enable OSC communication with the OSSIA_Device
o = s.options;
o.numInputBusChannels = 32;       // Allow for many possible inputs
o.numOutputBusChannels = 2;       // Stereo output for binaural rendering
o.numAudioBusChannels = 2048;
o.numWireBufs = 512;
s.waitForBoot {
	// Booting scsynth server before setting up Mosca

	// Set global variable passed as Mosca's arguments
	~decoder = FoaDecoderKernel.newCIPIC(21, s, s.sampleRate.asInteger); // ATK Binaural

	MIDIIn.connect();  // must connect to MIDI for MMC synchronisation
	s.sync;

	~moscaInstance = Mosca(
		//projDir: "/path/to/project/folder",
		//rirBank: "/path/to/rirBank/folder",
		nsources: 11, // Set the number of sources
		decoder: ~decoder,
		parentOssiaNode:~supercoll;
	).gui();
};
)
::
